package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"

	"github.com/magodo/terraform-provider-azurerm-insight/pkg/core"
)

func main() {
	flag.Usage = func() {
		fmt.Fprint(os.Stderr, "Generate terraform schema metadata files for linking to swagger schema.\n\n")
		flag.PrintDefaults()
		os.Exit(2)
	}

	pwd, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}
	providerSchemaPath := flag.String("provider-schema", "", `The path to the Terraform provider schema file (generated by "$ terraform providers schema -json")`)
	providerName := flag.String("provider-name", "", "Full qualified name of the provider (e.g. registry.terraform.io/hashicorp/azurerm)")
	outputPath := flag.String("output", pwd, "The output directory")
	resource := flag.String("resource", "", "The Terraform resource name which to generate its flattened schema scaffold. If not specified, will apply to all resources available.")
	isDataSource := flag.Bool("data-source", false, "Whether applies to data source")
	isNew := flag.Bool("-new", false, "Wehther to generate the brand new terraform schema file regardless of existing schemas.")
	showHelp := flag.Bool("help", false, "Display this message")

	flag.Parse()

	if *showHelp {
		flag.Usage()
		return
	}

	// Read the provider schema
	b, err := ioutil.ReadFile(*providerSchemaPath)
	if err != nil {
		log.Fatal(err)
	}

	var providerSchemas core.TerraformProviderSchemas
	if err := json.Unmarshal(b, &providerSchemas); err != nil {
		log.Fatal(err)
	}

	provider, ok := providerSchemas.Schemas[*providerName]
	if !ok {
		log.Fatalf("Provider: %s not found in the provider schemas", *providerName)
	}

	// Prepare output directory
	if err := os.MkdirAll(*outputPath, 0755); err != nil {
		log.Fatal(err)
	}

	if *resource != "" {
		var (
			ok     bool
			prefix string
			schema *core.TerraformSchema
		)
		if *isDataSource {
			schema, ok = provider.DataSourceSchemas[*resource]
			if !ok {
				log.Fatalf("No such data source: %s", *resource)
			}
			prefix = "data_"
		} else {
			schema, ok = provider.ResourceSchemas[*resource]
			if !ok {
				log.Fatalf("No such resource: %s", *resource)
			}
		}
		if err := genFile(prefix+*resource, schema.Block, *outputPath, *isNew); err != nil {
			log.Fatal(err)
		}
		return
	}

	var (
		schemas map[string]*core.TerraformSchema
		oprefix string
	)
	if *isDataSource {
		schemas = provider.DataSourceSchemas
		oprefix = "data_"
	} else {
		schemas = provider.ResourceSchemas
	}

	for res, schema := range schemas {
		if err := genFile(oprefix+res, schema.Block, *outputPath, *isNew); err != nil {
			log.Fatal(err)
		}
	}
	return
}

func genFile(schemaName string, blk *core.TerraformBlock, odir string, isNew bool) error {

	var schema *core.TFSchema
	ofile := filepath.Join(odir, schemaName+".json")

	// If the meta file already exists and the user doesn't specify the -new flag,
	// we will generate the new schema by updating the existing one.
	if stat, err := os.Stat(ofile); err == nil && stat.Mode().IsRegular() && !isNew {
		b, err := ioutil.ReadFile(ofile)
		if err != nil {
			return err
		}
		var oldSchema core.TFSchema
		if err := json.Unmarshal(b, &oldSchema); err != nil {
			return fmt.Errorf("failed to unmarshal for schema %q: %v", schemaName, err)
		}
		schema, err = core.UpdateSchemaScaffoldFromTerraformBlock(schemaName, blk, &oldSchema)
		if err != nil {
			return err
		}
	} else {
		schema = core.NewSchemaScaffoldFromTerraformBlock(schemaName, blk)
	}

	b, err := json.MarshalIndent(schema, "", "  ")
	if err != nil {
		return err
	}
	if err := ioutil.WriteFile(ofile, b, 0644); err != nil {
		return err
	}
	return nil

}
